
# coding: utf-8

# <style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class="title-slide">
# <span style="float:left;">Licence CC BY-NC-ND</span>
# <span>Thierry Parmentelat &amp; Arnaud Legout</span>
# <span><img src="media/both-logos-small-alpha.png" style="display:inline" /></span>
# </div>

# # Noms de variables

# ## Compl√©ment - niveau basique

# Revenons sur les noms de variables autoris√©s ou non.

# Les noms les plus simples sont constitu√©s de lettres. Par exemple

# In[ ]:


factoriel = 1


# On peut utiliser aussi les majuscules, mais attention cela d√©finit une variable diff√©rente. Ainsi

# In[ ]:


Factoriel = 100
factoriel == Factoriel


# Le signe `==` permet de tester si deux variables ont la m√™me valeur.
# Si les variables ont la m√™me valeur, le test retournera `True`, et `False` sinon. On y reviendra bien entendu.

# ### Conventions habituelles

# En r√®gle g√©n√©rale, on utilise **uniquement des minuscules** pour d√©signer les variables simples (ainsi d'ailleurs que pour les noms de fonctions), les majuscules sont r√©serv√©es en principe pour d'autres sortes de variables, comme les noms de classe, que nous verrons ult√©rieurement.
# 
# Notons, qu'il s'agit uniquement d'une convention, ceci n'est pas impos√© par le langage lui-m√™me.

# Pour des raisons de lisibilit√©, il est √©galement possible d'utiliser le tiret bas `_` dans les noms de variables. On pr√©f√®rera ainsi

# In[ ]:


age_moyen = 75 # oui


# plut√¥t que ceci (bien qu'autoris√© par le langage)

# In[ ]:


AgeMoyen = 75 # autoris√©, mais non


# On peut √©galement utiliser des chiffres dans les noms de variables comme par exemple

# In[ ]:


age_moyen_dept75 = 80


# avec la restriction toutefois que le premier caract√®re ne peut pas √™tre un chiffre, cette affectation est donc refus√©e

# In[ ]:


75_age_moyen = 80 # erreur de syntaxe


# ### Le tiret bas comme premier caract√®re

# Il est par contre, possible de faire commencer un nom de variable par un tiret bas comme premier caract√®re&nbsp;; toutefois, √† ce stade, nous vous d√©conseillons d'utiliser cette pratique qui est r√©serv√©e √† des conventions de nommage bien sp√©cifiques.

# In[ ]:


_autorise_mais_deconseille = 'Voir le PEP 008'


# Et en tous cas, il est **fortement d√©conseill√©** d'utiliser des noms de la forme `__variable__` qui sont r√©serv√©s au langage. Nous reviendrons sur ce point dans le futur, mais reagardez par exemple cette variable que nous n'avons d√©finie nulle part mais qui pourtant existe bel et bien

# In[ ]:


__name__  # ne d√©finissez pas vous-m√™me de variables de ce genre


# ### Ponctuation

# Dans la plage des caract√®res ASCII, il n'est **pas possible** d'utiliser d'autres caract√®res que les caract√®res alphanum√©riques et le tiret bas. Notamment le tiret haut `-` est interpr√©t√© comme l'op√©ration de soustraction. Attention donc √† cette erreur fr√©quente

# In[ ]:


age-moyen = 75  # erreur : en fait python lit 'age - moyen = 75'


# ### Caract√®res exotiques

# En python-3, il est maintenant aussi possible d'utiliser des caract√®res Unicode dans les identificateurs

# In[ ]:


# les caract√®res accentu√©s sont permis
nom_√©l√®ve = "Jules Maigret"


# In[ ]:


# ainsi que l'alphabet grec
from math import cos, pi as ùûü
Œ∏ = ùûü / 4
cos(Œ∏)


# Tous les caract√®res Unicode ne sont pas permis - heureusement car cela serait source de confusion. Nous citons dans les r√©f√©rences les documents qui pr√©cisent quels sont exactement les caract√®res autoris√©s.

# In[ ]:


# ce caract√®re n'est pas autoris√©
# il est consid√©r√© comme un signe math√©matique (produit)
‚àè = 10


# #### Conseil
# 
# Il est **tr√®s vivement** recommand√©&nbsp;:
# 
# * tout d'abord de coder **en anglais**,
# * ensuite de **ne pas** d√©finir des identificateurs avec des caract√®res non ASCII, dans toute la mesure du possible,
# * enfin si vous utilisez un encodage autre que utf-8, vous **devez** bien **sp√©cifier l'encodage** utilis√© dans votre fichier source&nbsp;; nous y reviendrons en deuxi√®me semaine.

# ### Pour en savoir plus

# Pour les esprits curieux, Guido van Rossum, le fondateur de python, est le co-auteur d'un document qui d√©crit les conventions de codage √† utiliser dans les librairies python standard. Ces r√®gles sont plus restrictives que ce que le langage permet de faire, mais constituent une lecture int√©ressante si vous projetez d'√©crire beaucoup de python.
# 
# Voir dans le PEP 008 [la section consacr√©e aux r√®gles de nommage - (en anglais)](http://legacy.python.org/dev/peps/pep-0008/#descriptive-naming-styles)
# 

# Voir enfin, au sujet des caract√®res exotiques dans les identificateurs:
# 
# * https://www.python.org/dev/peps/pep-3131/ qui d√©finit les caract√®res exotiques autoris√©s, et qui repose √† son tour sur
# * http://www.unicode.org/reports/tr31/ (tr√®s technique!)
